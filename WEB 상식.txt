
브라우저 작동 원리
 - HTML 마크업을 처리하고 DOM 트리를 빌드한다. ("무엇을" 그릴지 결정)
 - CSS 마크업을 처리하고 CSSOM 트리를 빌드한다. ("어떻게" 그릴지 결정)
 - DOM, CSSOM을 결합하여 렌더링 트리 형성 ("화면에 그려질 것만" 결정) (display:none; 처럼 DOM에는 있지만 화면에서는 걸러내진 트리)
 - 렌더링 트리에서 레이아웃을 실행하여 각 노드의 기하학적 형태 계산.
 - 개별 노드를 화면에 페인트
 * 브라우저는 동기적으로 HTML, CSS, Javascript를 처리하므로 HTML 파서가 script 태그를 만나면
   js 코드를 실행하기 위해 DOM 빌드를 중지하고 자바스크립트 엔진으로 제어 권한을 넘김.
   따라서 body 요소의 가장 아래에 script를 위치시키는게 좋음


SPA (Single Page Application)
 - 브라우저에 최초로 페이지를 한번 로드 하고, 이후
   필요한 데이터만 서버로부터 json으로 전달 받아 동적으로 렌더링한다. 따라서 서버사이드 렌더링이 아닌,
   서버에서는 데이터만 받아오는 웹개발 기법.
 - 화면 구성에 필요한 모든 HTML을 클라이언트가 갖고 있고, 서버사이드에는 필요한 데이터를
   요청하고 JSON으로 받기 때문에 기존의 어플리케이션에 비해 화면을 구성하는 속도가 빠르다.
   (서버사이드 렌더링X) 
 - 장점 : 화면에 필요한 부분만 받아서 렌더링 하기 때문에 효율적이고 빠르다.
 - 단점 : 처음 화면 로딩시 모든 화면이 미리 준비되어 있어야 하기 때문에 로딩에 시간이 걸린다.

CORS (Cross-Origin Resource Sharing)
 - 

document ready, load 차이점
 - ready() : DOM Tree 생성 완료 후
 - load() : 모든 페이지 구성 요소 페인팅 완료 후

Node JS
 - 웹 브라우저에 종속적인 자바스크립트에서 외부에서 실행할 수 있는 Runtime 환경을 크롬 V8 엔진을 제공하여 여러 OS 환경에서 실행할 수 있는 환경
 - 자바스크립트를 브라우저에서 실행하는게 아니고, 서버사이드에서 실행하도록 함