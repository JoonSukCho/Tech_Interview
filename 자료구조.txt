
Array
 - 논리적 저장 순서와 물리적 저장 순서가 일치
 - 장점 : random access 가능
 - 조회 시간복잡도 : O(1)
 - 삽입 시간복잡도 : O(n)
 - 삭제 worst 시간복잡도 : O(n)


Linked List
 - 각각의 원소들은 자기 자신 다음에 어떤 원소인지만을 기억하고 있다.
 - 논리적 저장 순서와 물리적 저장 순서가 불일치
 - Tree 구조의 근간이 되는 자료구조
 - 조회, 삽입, 삭제 시간복잡도 : O(n)

배열(Array)와 Linked List(연결 리스트)의 차이점
 - Array
	- Random Access 지원
	- memory 위치가 연속적이고 고정적이기 때문에 삽입, 삭제 연산이 오래걸림
	- 장점 : 데이터 접근 속도가 빠르다.
	- 단점 : 선언 시, 배열의 크기를 지정해줘야 한다.
	           데이터 삽입이 Linked List에 비해 복잡하다.

 - Linked List
	- Sequential Access 지원 (Sequential Access : 순차지원)
	- 삽입, 삭제 연산이 빠르다.
	- 장점 : 삽입, 삭제 연산이 빠르다.
	- 단점 : 첫 항목부터 접근해야 하므로 데이터 접근 속도가 느리다.

 - https://medium.com/@audrl1010/linked-list-%EC%99%80-array-%EC%B0%A8%EC%9D%B4%EC%A0%90-4ba873c2e5f5



Stack
 - 선형 자료구조, LIFO

Queue
 - 선형 자료구조, FIFO