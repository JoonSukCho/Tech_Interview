
객체 지향 프로그래밍 (Object Oriented Programming)
 - 현실 세계를 모델링하여 객체들의 상호작용으로 서술하는 프로그래밍 기법.
 - 현실 세계의 사물들을 보고 그 객체로부터 개발하고자 하는 애플리케이션에 필요한 특징들을 뽑아와 프로그래밍 하는 것 (추상화)
 - 클래스 : 집단에 속하는 속성과 행위를 변수와 메서드로 정의한 것
 - 인스턴스(객체) : 클래스에서 정의한 것을 토대로 실제 메모리상에 할당된 것

 - OOP의 특징 : 추상화 - 불필요한 정보는 숨기고 중요한 정보만을 표현해서 공통의 속성이나 기능을 묶어 이름을 붙이는 것
 	        캡슐화 - 관련된 기능과 특성을 "클래스" 로 뭉쳐서 재사용 하기 쉽게 만듦.
                      상속성 - 부모 클래스의 속성과 기능을 그대로 이어받아 사용하고, 상속받은 자식클래스에서 일부 변형 후 사용 가능
                      다형성 - 하나의 변수명, 함수명이 상황에 따라 다르게 해석 (오버라이딩, 오버로딩 가능)
			오버라이딩 : 부모클래스의 메서드를 재정의
			오버로딩 : 같은 이름의 함수를 여러개 정의 한 후, 파라미터 갯수에 따라 다르게 호출

 - OOP의 장점 : 이미 작성한 코드에 대한 재사용성이 높다.
	        OOP로 만들어진 라이브러리를 내부적으로 어떻게 작동하는지 몰라도 개발자가 가져다 쓰면 되서 생산성이 높음 (캡슐화)
 - OOP의 단점 : 객체 간의 정보 교환이 모두 메시지 교환을 통해 일어나므로 많은 오버헤드 발생.
	        상태를 가지는 객체로 인한 버그 발생 가능성

접근 제어자
 - public : 모든 package에서 해당 class로 접근 가능
 - private : 자신을 포함한 package에서만 해당 class로 접근 가능
 - protected : 상속받은 class 에서만 해당 class로 접근 가능


함수형 프로그래밍
 - 함수를 이용해서 사이드 이펙트가 없도록 선언형 프로그래밍을 하는 것.
 - 함수가 1급 객체이다.


MVC 패턴
 - Model, View, Controller로 이루어진 디자인 패턴.
 - Model : 컨트롤러가 호출할 때 요청에 맞는 역할을 수행. 비즈니스 로직을 구현하는 영역으로 응용프로그램에서 데이터를 처리하는 부분.
		: 백그라운드에서 동작하는 로직 처리
 - View : 컨트롤러로부터 받은 모델의 결과값을 가지고 사용자에게 출력할 화면을 만듦.
		: 사용자가 보게 될 결과 화면 출력
 - Controller : 클라이언트의 요청을 받았을 때, 그 요청에 대해 실제 업무를 수행하는 모델 컴포넌트를 호출.
		: 사용자의 입력처리와 흐름 제어 담당
 - 장점 : 비즈니스 로직과 UI로직을 분리하여 유지보수 하기 쉬움.
 
 - 모델1  : 비즈니스 로직 영역(Controller)에 프레젠테이션 영역(View)를 같이 구현
 - 모델2  : 비즈니스 로직 영역과 프레젠테이션 영역 분리 


REST (REpresentational State Transfer)
 - API설계의 중심에 자원(Resource)이 있고, HTTP Method를 통해 자원을 처리하도록 설계된 아키텍처


RESTful 하게 API를 디자인 한다는 것은?
 - 리소스와 행위를 명시적이고 직관적으로 분리한다.
	- 리소스는 URI로 표현되는데, '명사'로 표현
	- 행위는 HTTP Method로 표현, GET, POST, PUT, DELETE를 분명한 목적으로 사용
 - 메시지는 Header와 Body를 명확하게 분리해서 사용
 - API의 버전을 관리한다.
 - 서버와 클라이언트가 같은 방식을 사용해서 요청하도록 한다.
	- 한쪽은 form-data, 한쪽은 json으로 보내는 식 말고, 양쪽 다 form-data 혹은 json 으로 보내서 하나로 통일한다.


RESTful API의 장점
 - 기존 웹 인프라인 HTTP를 그대로 사용할 수 있다.
 - OPEN API를 제공하기 쉽다.
 - 멀티플랫폼 지원 및 연동이 쉽다.
 - 서버와 클라이언트의 역할을 명확하게 분리할 수 있다.


RESTful API의 단점
 - 표준이 존재하지 않는다.
 - 사용할 수 있는 Method가 4가지 밖에 없다.
 - 분산환경에는 부적합하다.

os가 프로그램에 메모리를 할당해주는방식
Stack과 Heap
 - Stack : 매우 빠른 액세스, 변수를 직접 할당/해제 할 필요가 없다(메모리 관리 효율적), 크기 제한 1mb, 지역 변수만 스택영역에 액세스 가능
	- 예를 들어 int a[10000000]; 으로 할당하면 스택의 크기를 넘기 때문에 스택오버플로 발생
 - Heap : 메모리를 관리해야함, 메모리 크기 제한 없음, 